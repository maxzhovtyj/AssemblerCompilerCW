Data1 segment
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. data1 - Length: 5 - Type: user identifier
2. segment - Length: 7 - Type: segment directive
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   1   |   2   |   1   |  0  |  0  |  0  |  0  |  0  |  0  |
=============================================================

String db 'Hello'
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. string - Length: 6 - Type: user identifier
2. db - Length: 2 - Type: type byte
3. 'hello' - Length: 7 - Type: string
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  1  |  3  |  1  |  0  |  0  |
=============================================================

Val db 101b
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. val - Length: 3 - Type: user identifier
2. db - Length: 2 - Type: type byte
3. 101b - Length: 4 - Type: binary
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  1  |  3  |  1  |  0  |  0  |
=============================================================

Vw dw 1234d
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. vw - Length: 2 - Type: user identifier
2. dw - Length: 2 - Type: type 2 bytes
3. 1234d - Length: 5 - Type: decimal
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  1  |  3  |  1  |  0  |  0  |
=============================================================

Vd dd 0d7856fdah
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. vd - Length: 2 - Type: user identifier
2. dd - Length: 2 - Type: type 4 bytes
3. 0d7856fdah - Length: 10 - Type: hexadecimal
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  1  |  3  |  1  |  0  |  0  |
=============================================================

Data1 ends
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. data1 - Length: 5 - Type: user identifier
2. ends - Length: 4 - Type: end of segment
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   1   |   2   |   1   |  0  |  0  |  0  |  0  |  0  |  0  |
=============================================================

Data2 segment
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. data2 - Length: 5 - Type: user identifier
2. segment - Length: 7 - Type: segment directive
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   1   |   2   |   1   |  0  |  0  |  0  |  0  |  0  |  0  |
=============================================================

Var dw 123
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. var - Length: 3 - Type: user identifier
2. dw - Length: 2 - Type: type 2 bytes
3. 123 - Length: 3 - Type: decimal
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  1  |  3  |  1  |  0  |  0  |
=============================================================

QWERTY dd 67ff89h
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. qwerty - Length: 6 - Type: user identifier
2. dd - Length: 2 - Type: type 4 bytes
3. 67ff89h - Length: 7 - Type: hexadecimal
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  1  |  3  |  1  |  0  |  0  |
=============================================================

Zxcv db 89h
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. zxcv - Length: 4 - Type: user identifier
2. db - Length: 2 - Type: type byte
3. 89h - Length: 3 - Type: hexadecimal
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  1  |  3  |  1  |  0  |  0  |
=============================================================

Data2 ends
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. data2 - Length: 5 - Type: user identifier
2. ends - Length: 4 - Type: end of segment
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   1   |   2   |   1   |  0  |  0  |  0  |  0  |  0  |  0  |
=============================================================

Code1 segment
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. code1 - Length: 5 - Type: user identifier
2. segment - Length: 7 - Type: segment directive
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   1   |   2   |   1   |  0  |  0  |  0  |  0  |  0  |  0  |
=============================================================

Assume cs : Code1 , ds : Data1 , gs : Data2
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. assume - Length: 6 - Type: assume
2. cs - Length: 2 - Type: segment register
3. : - Length: 1 - Type: character
4. code1 - Length: 5 - Type: user identifier
5. , - Length: 1 - Type: character
6. ds - Length: 2 - Type: segment register
7. : - Length: 1 - Type: character
8. data1 - Length: 5 - Type: user identifier
9. , - Length: 1 - Type: character
10. gs - Length: 2 - Type: segment register
11. : - Length: 1 - Type: character
12. data2 - Length: 5 - Type: user identifier
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  3  |  6  |  3  |  10  |  3  |
=============================================================

begin :
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. begin - Length: 5 - Type: user identifier
2. : - Length: 1 - Type: character
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   1   |   0   |   0   |  0  |  0  |  0  |  0  |  0  |  0  |
=============================================================

nop
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. nop - Length: 3 - Type: instruction
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  0  |  0  |  0  |  0  |  0  |  0  |
=============================================================

nop
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. nop - Length: 3 - Type: instruction
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  0  |  0  |  0  |  0  |  0  |  0  |
=============================================================

nop
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. nop - Length: 3 - Type: instruction
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  0  |  0  |  0  |  0  |  0  |  0  |
=============================================================

imul eax
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. imul - Length: 4 - Type: instruction
2. eax - Length: 3 - Type: 32-bit data register
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  1  |  0  |  0  |  0  |  0  |
=============================================================

mul byte ptr gs : [ ebx + ecx ]
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. mul - Length: 3 - Type: instruction
2. byte - Length: 4 - Type: identifier type byte
3. ptr - Length: 3 - Type: identifier type definition
4. gs - Length: 2 - Type: segment register
5. : - Length: 1 - Type: character
6. [ - Length: 1 - Type: character
7. ebx - Length: 3 - Type: 32-bit address register
8. + - Length: 1 - Type: character
9. ecx - Length: 3 - Type: 32-bit address register
10. ] - Length: 1 - Type: character
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  9  |  0  |  0  |  0  |  0  |
=============================================================

idiv bl
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. idiv - Length: 4 - Type: instruction
2. bl - Length: 2 - Type: 8-bit register
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  1  |  0  |  0  |  0  |  0  |
=============================================================

or byte ptr ds : [ edx + esi ] , 111b
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. or - Length: 2 - Type: instruction
2. byte - Length: 4 - Type: identifier type byte
3. ptr - Length: 3 - Type: identifier type definition
4. ds - Length: 2 - Type: segment register
5. : - Length: 1 - Type: character
6. [ - Length: 1 - Type: character
7. edx - Length: 3 - Type: 32-bit address register
8. + - Length: 1 - Type: character
9. esi - Length: 3 - Type: 32-bit address register
10. ] - Length: 1 - Type: character
11. , - Length: 1 - Type: character
12. 111b - Length: 4 - Type: binary
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  9  |  12  |  1  |  0  |  0  |
=============================================================

sub dword ptr [ ebx + ecx ] , eax
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. sub - Length: 3 - Type: instruction
2. dword - Length: 5 - Type: identifier type 4 bytes
3. ptr - Length: 3 - Type: identifier type definition
4. [ - Length: 1 - Type: character
5. ebx - Length: 3 - Type: 32-bit address register
6. + - Length: 1 - Type: character
7. ecx - Length: 3 - Type: 32-bit address register
8. ] - Length: 1 - Type: character
9. , - Length: 1 - Type: character
10. eax - Length: 3 - Type: 32-bit data register
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  7  |  10  |  1  |  0  |  0  |
=============================================================

cmp eax , 01A2h
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. cmp - Length: 3 - Type: instruction
2. eax - Length: 3 - Type: 32-bit data register
3. , - Length: 1 - Type: character
4. 01a2h - Length: 5 - Type: hexadecimal
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  1  |  4  |  1  |  0  |  0  |
=============================================================

jmp short label1
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. jmp - Length: 3 - Type: instruction
2. short - Length: 5 - Type: distance definition
3. label1 - Length: 6 - Type: user identifier
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  2  |  0  |  0  |  0  |  0  |
=============================================================

label1 :
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. label1 - Length: 6 - Type: user identifier
2. : - Length: 1 - Type: character
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   1   |   0   |   0   |  0  |  0  |  0  |  0  |  0  |  0  |
=============================================================

cmp ebx , 'text'
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. cmp - Length: 3 - Type: instruction
2. ebx - Length: 3 - Type: 32-bit data register
3. , - Length: 1 - Type: character
4. 'text' - Length: 6 - Type: string
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  1  |  4  |  1  |  0  |  0  |
=============================================================

jnb label2
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. jnb - Length: 3 - Type: instruction
2. label2 - Length: 6 - Type: user identifier
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  1  |  0  |  0  |  0  |  0  |
=============================================================

adc al , byte ptr [ edx + esi ]
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. adc - Length: 3 - Type: instruction
2. al - Length: 2 - Type: 8-bit register
3. , - Length: 1 - Type: character
4. byte - Length: 4 - Type: identifier type byte
5. ptr - Length: 3 - Type: identifier type definition
6. [ - Length: 1 - Type: character
7. edx - Length: 3 - Type: 32-bit address register
8. + - Length: 1 - Type: character
9. esi - Length: 3 - Type: 32-bit address register
10. ] - Length: 1 - Type: character
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  1  |  4  |  7  |  0  |  0  |
=============================================================

jmp label1
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. jmp - Length: 3 - Type: instruction
2. label1 - Length: 6 - Type: user identifier
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  1  |  0  |  0  |  0  |  0  |
=============================================================

label2 :
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. label2 - Length: 6 - Type: user identifier
2. : - Length: 1 - Type: character
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   1   |   0   |   0   |  0  |  0  |  0  |  0  |  0  |  0  |
=============================================================

cmp al , 111b
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. cmp - Length: 3 - Type: instruction
2. al - Length: 2 - Type: 8-bit register
3. , - Length: 1 - Type: character
4. 111b - Length: 4 - Type: binary
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  1  |  4  |  1  |  0  |  0  |
=============================================================

jnb label2
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. jnb - Length: 3 - Type: instruction
2. label2 - Length: 6 - Type: user identifier
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  2  |  1  |  0  |  0  |  0  |  0  |
=============================================================

nop
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. nop - Length: 3 - Type: instruction
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  0  |  0  |  0  |  0  |  0  |  0  |
=============================================================

nop
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. nop - Length: 3 - Type: instruction
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  0  |  0  |  0  |  0  |  0  |  0  |
=============================================================

Code1 ends
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. code1 - Length: 5 - Type: user identifier
2. ends - Length: 4 - Type: end of segment
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   1   |   2   |   1   |  0  |  0  |  0  |  0  |  0  |  0  |
=============================================================

end
=============================================================
No - Lexeme   - Length -  Type  
=============================================================
1. end - Length: 3 - Type: end directive
=============================================================
| Label | Mnemonic code | Operand 1 | Operand 2 | Operand 3 |
=============================================================
|   0   |   1   |   1   |  0  |  0  |  0  |  0  |  0  |  0  |
=============================================================

